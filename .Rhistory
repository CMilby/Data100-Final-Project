NROW ( data_2011 [ !is.na ( data_2011$X.20 ), ] ), # PHP
NROW ( data_2011 [ !is.na ( data_2011$X.21 ), ] ), # Python
NROW ( data_2011 [ !is.na ( data_2011$X.22 ), ] ), # Ruby
NROW ( data_2011 [ !is.na ( data_2011$X.23 ), ] ), # SQL
NROW ( data_2011 [ !is.na ( data_2011$X.24 ), ] ), # C#
NROW ( data_2011 [ !is.na ( data_2011$X.25 ), ] ), # C++
NROW ( data_2011 [ !is.na ( data_2011$X.26 ), ] ), # C
0, # Objective-C
0 ) # Node-JS
language_use2011 / 20
language_use2011
language_use2011 / 20
language_use2011 <- data.frame ( langs, language_use2011 / NROW ( data_2011 ), rep ( 2011, 11 ) )
View(language_use2011)
language_use2011 <- data.frame ( langs, language_use2011 / NROW ( data_2011 ), rep ( 2011, 11 ) )
language_use2012 <- data.frame ( langs, language_use2012 / NROW ( data_2012 ), rep ( 2012, 11 ) )
language_use2013 <- data.frame ( langs, language_use2013 / NROW ( data_2013 ), rep ( 2013, 11 ) )
language_use2014 <- data.frame ( langs, language_use2014 / NROW ( data_2014 ), rep ( 2014, 11 ) )
language_use2015 <- data.frame ( langs, language_use2015 / NROW ( data_2015 ), rep ( 2015, 11 ) )
language_use2016 [ 2, ] <- language_use2016 [ 2, ] / NROW ( data_2016 )
langs <- c ( "Java", "JavaScript", "PHP", "Python", "Ruby", "SQL", "C#", "C++", "C", "Objective-C", "Node.js")
empties <- c ( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
language_use2016 <- data.frame ( langs, empties, rep ( 2016, 11 ) )
rownames ( language_use2016 ) <- c ( "Java", "JavaScript", "PHP", "Python", "Ruby", "SQL", "C#", "C++", "C", "Objective-C", "Node.js")
for ( i in data_2016$tech_do ) {
if ( !is.na ( i ) ) {
vals <- strsplit ( toString ( i ), "; " )
vals <- unlist ( vals )
for ( j in vals ) {
if ( !is.na ( j ) ) {
if ( toString ( j ) %in% rownames ( language_use2016 ) ) {
language_use2016 [ j, 2 ] <- language_use2016 [ j,2 ] + 1
}
}
}
}
}
language_use2016 [ 2, ] <- language_use2016 [ 2, ] / NROW ( data_2016 )
langs <- c ( "Java", "JavaScript", "PHP", "Python", "Ruby", "SQL", "C#", "C++", "C", "Objective-C", "Node.js")
empties <- c ( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
language_use2016 <- data.frame ( langs, empties, rep ( 2016, 11 ) )
for ( i in data_2016$tech_do ) {
if ( !is.na ( i ) ) {
vals <- strsplit ( toString ( i ), "; " )
vals <- unlist ( vals )
for ( j in vals ) {
if ( !is.na ( j ) ) {
if ( toString ( j ) %in% rownames ( language_use2016 ) ) {
language_use2016 [ j, 2 ] <- language_use2016 [ j, 2 ] + 1
}
}
}
}
}
View(language_use2016)
for ( i in data_2016$tech_do ) {
if ( !is.na ( i ) ) {
vals <- strsplit ( toString ( i ), "; " )
vals <- unlist ( vals )
for ( j in vals ) {
if ( !is.na ( j ) ) {
if ( toString ( j ) %in% rownames ( language_use2016 ) ) {
language_use2016 [ j, 2 ] <- language_use2016 [ j, 2 ] + 1
}
}
}
}
}
language_use2016 <- data.frame ( langs, empties, rep ( 2016, 11 ) )
language_use2016 <- data.frame ( langs, rep.int ( 0, 11 ), rep ( 2016, 11 ) )
rownames ( language_use2016 ) <- c ( "Java", "JavaScript", "PHP", "Python", "Ruby", "SQL", "C#", "C++", "C", "Objective-C", "Node.js")
for ( i in data_2016$tech_do ) {
if ( !is.na ( i ) ) {
vals <- strsplit ( toString ( i ), "; " )
vals <- unlist ( vals )
for ( j in vals ) {
if ( !is.na ( j ) ) {
if ( toString ( j ) %in% rownames ( language_use2016 ) ) {
language_use2016 [ j, 2 ] <- language_use2016 [ j, 2 ] + 1
}
}
}
}
}
language_use2016 [ 2, ] <- language_use2016 [ 2, ] / NROW ( data_2016 )
?lapply
for ( i in data_2016$tech_do ) {
if ( !is.na ( i ) ) {
vals <- strsplit ( toString ( i ), "; " )
vals <- unlist ( vals )
for ( j in vals ) {
if ( !is.na ( j ) ) {
if ( toString ( j ) %in% rownames ( language_use2016 ) ) {
language_use2016 [ j, 2 ] <- language_use2016 [ j, 2 ] + 1
}
}
}
}
}
language_use2016 <- data.frame ( langs, rep.int ( 0, 11 ), rep ( 2016, 11 ) )
rownames ( language_use2016 ) <- c ( "Java", "JavaScript", "PHP", "Python", "Ruby", "SQL", "C#", "C++", "C", "Objective-C", "Node.js")
for ( i in data_2016$tech_do ) {
if ( !is.na ( i ) ) {
vals <- strsplit ( toString ( i ), "; " )
vals <- unlist ( vals )
for ( j in vals ) {
if ( !is.na ( j ) ) {
if ( toString ( j ) %in% rownames ( language_use2016 ) ) {
language_use2016 [ j, 2 ] <- language_use2016 [ j, 2 ] + 1
}
}
}
}
}
language_use2016 [ , 2 ] / NROW ( data_2016 )
language_use2016$rep.int.0..11. <- language_use2016 [ , 2 ] / NROW ( data_2016 )
language_use2017 <- data.frame ( langs, rep.int ( 0, 11 ), rep ( 2017, 11 ) )
rownames ( language_use2017 ) <- c ( "Java", "JavaScript", "PHP", "Python", "Ruby", "SQL", "C#", "C++", "C", "Objective-C", "Node.js")
for ( i in data_2017$HaveWorkedLanguage ) {
if ( !is.na ( i ) ) {
vals <- strsplit ( toString ( i ), "; " )
vals <- unlist ( vals )
for ( j in vals ) {
if ( !is.na ( j ) ) {
if ( toString ( j ) %in% rownames ( language_use2017 ) ) {
language_use2017 [ j, 2 ] <- language_use2017 [ j, 2 ] + 1
}
}
}
}
}
language_use2017$rep.int.0..11. <- language_use2017 [ , 2 ] / NROW ( data_2017 )
rm ( i, j, vals )
rm ( langs, empties )
langs <- c ( "Java", "JavaScript", "PHP", "Python", "Ruby", "SQL", "C#", "C++", "C", "Objective-C", "Node.js")
language_use <- rbind ( language_use2011, language_use2012, language_use2013, language_use2014, language_use2015, language_use2016, language_use2017 )
language_use <- do.call ( "rbind", list ( language_use2011, language_use2012, language_use2013, language_use2014, language_use2015, language_use2016, language_use2017 ) )
language_use <- list ( language_use2011, language_use2012, language_use2013, language_use2014, language_use2015, language_use2016, language_use2017 )
language_use <- do.call ( "rbind", language_use  )
language_use <- do.call ( rbind, language_use )
names ( language_use2011 )
language_use2011 <- c ( NROW ( data_2011 [ !is.na ( data_2011$Which.languages.are.you.proficient.in. ), ] ), # Java
NROW ( data_2011 [ !is.na ( data_2011$X.18 ), ] ), # JavaScript
NROW ( data_2011 [ !is.na ( data_2011$X.20 ), ] ), # PHP
NROW ( data_2011 [ !is.na ( data_2011$X.21 ), ] ), # Python
NROW ( data_2011 [ !is.na ( data_2011$X.22 ), ] ), # Ruby
NROW ( data_2011 [ !is.na ( data_2011$X.23 ), ] ), # SQL
NROW ( data_2011 [ !is.na ( data_2011$X.24 ), ] ), # C#
NROW ( data_2011 [ !is.na ( data_2011$X.25 ), ] ), # C++
NROW ( data_2011 [ !is.na ( data_2011$X.26 ), ] ), # C
0, # Objective-C
0 ) # Node-JS
language_use2012 <- c ( NROW ( data_2012 [ !is.na ( data_2012$Which.languages.are.you.proficient.in. ), ] ), # Java
NROW ( data_2012 [ !is.na ( data_2012$X.11 ), ] ), # JavaScript
NROW ( data_2012 [ !is.na ( data_2012$X.13 ), ] ), # PHP
NROW ( data_2012 [ !is.na ( data_2012$X.14 ), ] ), # Python
NROW ( data_2012 [ !is.na ( data_2012$X.16 ), ] ), # Ruby
NROW ( data_2012 [ !is.na ( data_2012$X.17 ), ] ), # SQL
NROW ( data_2012 [ !is.na ( data_2012$X.18 ), ] ), # C#
NROW ( data_2012 [ !is.na ( data_2012$X.19 ), ] ), # C++
NROW ( data_2012 [ !is.na ( data_2012$X.20 ), ] ), # C
NROW ( data_2012 [ !is.na ( data_2012$X.15 ), ] ), # Objective-C
0 ) # Node-JS
language_use2013 <- c ( NROW ( data_2013 [ !is.na ( data_2013$X.42 ), ] ), # Java
NROW ( data_2013 [ !is.na ( data_2013$X.43 ), ] ), # JavaScript
NROW ( data_2013 [ !is.na ( data_2013$X.48 ), ] ), # PHP
NROW ( data_2013 [ !is.na ( data_2013$X.49 ), ] ), # Python
NROW ( data_2013 [ !is.na ( data_2013$X.50 ), ] ), # Ruby
NROW ( data_2013 [ !is.na ( data_2013$X.51 ), ] ), # SQL
NROW ( data_2013 [ !is.na ( data_2013$X.41 ), ] ), # C#
NROW ( data_2013 [ !is.na ( data_2013$X.40 ), ] ), # C++
NROW ( data_2013 [ !is.na ( data_2013$Which.of.the.following.languages.or.technologies.have.you.used.significantly.in.the.past.year. ), ] ), # C
NROW ( data_2013 [ !is.na ( data_2013$X.47 ), ] ), # Objective-C
NROW ( data_2013 [ !is.na ( data_2013$X.46 ), ] ) ) # Node-JS
language_use2014 <- c ( NROW ( data_2014 [ !is.na ( data_2014$X.27 ), ] ), # Java
NROW ( data_2014 [ !is.na ( data_2014$X.28 ), ] ), # JavaScript
NROW ( data_2014 [ !is.na ( data_2014$X.31 ), ] ), # PHP
NROW ( data_2014 [ !is.na ( data_2014$X.32 ), ] ), # Python
NROW ( data_2014 [ !is.na ( data_2014$X.33 ), ] ), # Ruby
NROW ( data_2014 [ !is.na ( data_2014$X.34 ), ] ), # SQL
NROW ( data_2014 [ !is.na ( data_2014$X.26 ), ] ), # C#
NROW ( data_2014 [ !is.na ( data_2014$X.25 ), ] ), # C++
NROW ( data_2014 [ !is.na ( data_2014$X.24 ), ] ), # C
NROW ( data_2014 [ !is.na ( data_2014$X.30 ), ] ), # Objective-C
NROW ( data_2014 [ !is.na ( data_2014$X.29 ), ] ) ) # Node-Js
language_use2015 <- c ( NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..Java ), ] ), # Java
NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..JavaScript ), ] ), # JavaScript
NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..PHP ), ] ), # PHP
NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..Python ), ] ), # Python
NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..Ruby ), ] ), # Ruby
NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..SQL ), ] ), # SQL
NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..C. ), ] ), # C#
NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..C.. ), ] ), # C++
NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..C ), ] ), # C
NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..Objective.C ), ] ), # OBjective-C
NROW ( data_2015 [ !is.na ( data_2015$Current.Lang...Tech..Node.js ), ] ) ) # Node-JS
langs <- c ( "Java", "JavaScript", "PHP", "Python", "Ruby", "SQL", "C#", "C++", "C", "Objective-C", "Node.js")
language_use2016 <- data.frame ( langs, rep.int ( 0, 11 ), rep ( 2016, 11 ) )
rownames ( language_use2016 ) <- c ( "Java", "JavaScript", "PHP", "Python", "Ruby", "SQL", "C#", "C++", "C", "Objective-C", "Node.js")
for ( i in data_2016$tech_do ) {
if ( !is.na ( i ) ) {
vals <- strsplit ( toString ( i ), "; " )
vals <- unlist ( vals )
for ( j in vals ) {
if ( !is.na ( j ) ) {
if ( toString ( j ) %in% rownames ( language_use2016 ) ) {
language_use2016 [ j, 2 ] <- language_use2016 [ j, 2 ] + 1
}
}
}
}
}
language_use2016$rep.int.0..11. <- language_use2016 [ , 2 ] / NROW ( data_2016 )
language_use2017 <- data.frame ( langs, rep.int ( 0, 11 ), rep ( 2017, 11 ) )
rownames ( language_use2017 ) <- c ( "Java", "JavaScript", "PHP", "Python", "Ruby", "SQL", "C#", "C++", "C", "Objective-C", "Node.js")
for ( i in data_2017$HaveWorkedLanguage ) {
if ( !is.na ( i ) ) {
vals <- strsplit ( toString ( i ), "; " )
vals <- unlist ( vals )
for ( j in vals ) {
if ( !is.na ( j ) ) {
if ( toString ( j ) %in% rownames ( language_use2017 ) ) {
language_use2017 [ j, 2 ] <- language_use2017 [ j, 2 ] + 1
}
}
}
}
}
language_use2017$rep.int.0..11. <- language_use2017 [ , 2 ] / NROW ( data_2017 )
rm ( i, j, vals )
language_use2011 <- data.frame ( langs, language_use2011 / NROW ( data_2011 ), rep ( 2011, 11 ) )
language_use2012 <- data.frame ( langs, language_use2012 / NROW ( data_2012 ), rep ( 2012, 11 ) )
language_use2013 <- data.frame ( langs, language_use2013 / NROW ( data_2013 ), rep ( 2013, 11 ) )
language_use2014 <- data.frame ( langs, language_use2014 / NROW ( data_2014 ), rep ( 2014, 11 ) )
language_use2015 <- data.frame ( langs, language_use2015 / NROW ( data_2015 ), rep ( 2015, 11 ) )
rm ( langs )
language_use <- list ( language_use2011, language_use2012, language_use2013, language_use2014, language_use2015, language_use2016, language_use2017 )
language_use <- do.call ( rbind, language_use )
names ( language_use2011 )
names <- c ( "Language", "Percent", "Year" )
colnames( language_use2011 ) <- names
colnames( language_use2012 ) <- names
colnames( language_use2013 ) <- names
colnames( language_use2014 ) <- names
colnames( language_use2015 ) <- names
colnames( language_use2016 ) <- names
colnames( language_use2017 ) <- names
language_use <- list ( language_use2011, language_use2012, language_use2013, language_use2014, language_use2015, language_use2016, language_use2017 )
language_use <- do.call ( rbind, language_use )
rm ( language_use2011, language_use2012, language_use2013, language_use2014, language_use2015, language_use2016, language_use2017 )
rm ( langs, names )
require(ggplot2)
View(language_use)
ggplot ( data = language_use, aes ( x = Year, y = Percent ) )
ggplot ( data = language_use, aes ( x = Year, y = Percent ) ) +
geom_point()
ggplot ( data = language_use, aes ( x = Year, y = Percent,group = Language  ) ) +
geom_point()
ggplot ( data = language_use, aes ( x = Year, y = Percent,group = Language  ) ) +
geom_point ( aes( color = Language) )
ggplot ( data = language_use, aes ( x = Year, y = Percent,group = Language  ) ) +
geom_point ( aes ( color = Language ) ) +
geom_line ( aes ( color = Language ) )
plot ( data_2015$Gender )
plot ( data_2016$gender )
plot ( data_2017$Gender )
gender_2017 <- data.frame ( data_2017 [ ( ( data_2017$Gender == "Female" | data_2017$Gender == "Male" ) & !is.na ( data_2017$Gender ) ), "Gender" ] )
num_not_null <- NROW ( data_2017 [ !is.na ( data_2017$Gender ), ] )
other <- data.frame ( rep ( "Other", num_not_null - NROW ( gender_2017 ) ) )
colnames ( other ) <- c ( "Gender" )
colnames( gender_2017 ) <- c ( "Gender" )
gender_2017 <- rbind ( gender_2017, other )
ggplot ( data = gender_2017, aes( Gender ) ) +
geom_bar()
require(ggplot2)
ggplot ( data = gender_2017, aes( Gender ) ) +
geom_bar()
gender_2017 <- data.frame ( data_2017 [ ( ( data_2017$Gender == "Female" | data_2017$Gender == "Male" ) & !is.na ( data_2017$Gender ) ), "Gender" ] )
gender_2017 <- data.frame ( gender_2017, rep ( 2017, NROW ( gender_2017 ) ) )
View(gender_2017)
num_not_null <- NROW ( data_2017 [ !is.na ( data_2017$Gender ), ] )
other <- data.frame ( rep ( "Other", num_not_null - NROW ( gender_2017 ) ), rep ( 2017, num_not_null - NROW ( gender_2017 ) ) )
colnames ( other ) <- c ( "Gender", "Year" )
colnames( gender_2017 ) <- c ( "Gender", "Year" )
gender_2017 <- rbind ( gender_2017, other )
ggplot ( data = gender_2017, aes( Gender ) ) +
geom_bar()
gender_2015 <- data.frame ( data_2015$Gender, rep ( 2015, NROW ( data_2015 ) ) )
gender_2016 <- data.frame ( data_2016$gender, rep ( 2016, NROW ( data_2016 ) ) )
gender_2016 <- data.frame ( data_2016$gender, rep ( 2016, NROW ( data_2016 ) ) )
colnames ( gender_2015 ) <- c ( "Gender", "Year" )
colnames ( gender_2016 ) <- c ( "Gender", "Year" )
gender <- list ( gender_2015, gender_2016, gender_2017 )
gender <- do.call ( rbind, gender )
ggplot ( data = gender, aes( Gender ) ) +
geom_bar()
ggplot ( data = gender, aes( Gender ) ) +
geom_bar( aes ( fill = Year ) )
ggplot ( data = gender, aes( Gender ) ) +
geom_bar( aes ( fill = Year ), position = "dodge", stat = "identity" )
ggplot ( data = gender, aes( Gender, Gender ) ) +
geom_bar( aes ( fill = Year ), position = "dodge", stat = "identity" )
ggplot ( data = gender, aes( Year, Gender ) ) +
geom_bar( aes ( fill = Year ), position = "dodge", stat = "identity" )
ggplot ( data = gender, aes( Gender ) ) +
geom_bar( aes ( fill = Year ), position = "dodge" )
gender <- data.frame ( gender, rep ( 1, NROW ( gender ) ) )
colnames ( gender ) <- c ( "Gender", "Year", "Value" )
ggplot ( data = gender, aes( Gender, Value ) ) +
geom_bar( aes ( fill = Year ), position = "dodge" )
View(gender)
ggplot ( data = gender, aes( Year, Value ) ) +
geom_bar( aes ( fill = Year ), position = "dodge" )
ggplot ( data = gender, aes( Year ) ) +
geom_bar( aes ( fill = Year ), position = "dodge" )
ggplot ( data = gender, aes( Year, Gender ) ) +
geom_bar( aes ( fill = Year ), position = "dodge" )
ggplot ( data = gender, aes( Gender, Year ) ) +
geom_bar( aes ( fill = Year ), position = "dodge" )
ggplot ( data = gender, aes( Gender, value ) ) +
geom_bar( aes ( fill = Year ), position = "dodge" )
gender <- list ( gender_2015, gender_2016, gender_2017 )
gender <- do.call ( rbind, gender )
install.packages("reshape")
require(reshape)
gender.m <- melt ( gender, id.vars = "Gender" )
ggplot ( data = gender.m, aes( Gender, value ) ) +
geom_bar( aes ( fill = Year ), position = "dodge" )
ggplot ( data = gender.m, aes( Gender, value ) ) +
geom_bar( aes ( fill = Gender ), position = "dodge" )
ggplot ( data = gender.m, aes( Gender, value ) ) +
geom_bar( aes ( fill = Gender ), position = "dodge", stat = "identity" )
ggplot ( data = gender.m, aes( Gender, value ) ) +
geom_bar( aes ( fill = variable ), position = "dodge", stat = "identity" )
View(gender.m)
ggplot ( data = gender.m, aes( Gender, value ) ) +
geom_bar( aes ( fill = value ), position = "dodge", stat = "identity" )
gender.m <- melt ( gender, id.vars = "Year" )
ggplot ( data = gender.m, aes( Gender, value ) ) +
geom_bar( aes ( fill = value ), position = "dodge", stat = "identity" )
ggplot ( data = gender.m, aes( Year, value ) ) +
geom_bar( aes ( fill = value ), position = "dodge", stat = "identity" )
ggplot ( data = gender.m, aes( Year ) ) +
geom_bar( aes ( fill = value ), position = "dodge", stat = "identity" )
ggplot ( data = gender.m, aes( Year, variable ) ) +
geom_bar( aes ( fill = value ), position = "dodge", stat = "identity" )
table( gender )
gender <- table( gender )
gender.m <- melt ( gender, id.vars = "Year" )
ggplot ( data = gender.m, aes( Year, variable ) ) +
geom_bar( aes ( fill = value ), position = "dodge", stat = "identity" )
ggplot ( data = gender.m, aes( Year, value ) ) +
geom_bar( aes ( fill = Year ), position = "dodge", stat = "identity" )
ggplot ( data = gender.m, aes( Year, value ) ) +
geom_bar( aes ( fill = Gender ), position = "dodge", stat = "identity" )
gender <- gender [ value > 0 ]
gender <- gender [ Freq > 0 ]
gender <- gender [ gender$Freq > 0 ]
gender <- data.frame ( gender )
table ( gender )
plot ( data_2015$Gender )
plot ( data_2016$gender )
plot ( data_2017$Gender )
gender_2017 <- data.frame ( data_2017 [ ( ( data_2017$Gender == "Female" | data_2017$Gender == "Male" ) & !is.na ( data_2017$Gender ) ), "Gender" ] )
gender_2017 <- data.frame ( gender_2017, rep ( 2017, NROW ( gender_2017 ) ) )
num_not_null <- NROW ( data_2017 [ !is.na ( data_2017$Gender ), ] )
other <- data.frame ( rep ( "Other", num_not_null - NROW ( gender_2017 ) ), rep ( 2017, num_not_null - NROW ( gender_2017 ) ) )
colnames ( other ) <- c ( "Gender", "Year" )
colnames( gender_2017 ) <- c ( "Gender", "Year" )
gender_2017 <- rbind ( gender_2017, other )
gender_2015 <- data.frame ( data_2015$Gender, rep ( 2015, NROW ( data_2015 ) ) )
gender_2016 <- data.frame ( data_2016$gender, rep ( 2016, NROW ( data_2016 ) ) )
colnames ( gender_2015 ) <- c ( "Gender", "Year" )
colnames ( gender_2016 ) <- c ( "Gender", "Year" )
gender <- list ( gender_2015, gender_2016, gender_2017 )
gender <- do.call ( rbind, gender )
gender <- table( gender )
gender <- data.frame ( gender )
table ( gender )
gender.m <- melt ( gender, id.vars = "Year" )
ggplot ( data = gender.m, aes( Year, value ) ) +
geom_bar( aes ( fill = Gender ), position = "dodge", stat = "identity" )
rm ( num_not_null, other, gender_2015, gender_2016, gender_2017 )
table ( gender )
gender <- na.omit( c ( "Male") )
gender <- table( gender )
gender <- na.omit( c ( "Male") )
gender <- list ( gender_2015, gender_2016, gender_2017 )
gender <- do.call ( rbind, gender )
gender_2017 <- data.frame ( data_2017 [ ( ( data_2017$Gender == "Female" | data_2017$Gender == "Male" ) & !is.na ( data_2017$Gender ) ), "Gender" ] )
gender_2017 <- data.frame ( gender_2017, rep ( 2017, NROW ( gender_2017 ) ) )
num_not_null <- NROW ( data_2017 [ !is.na ( data_2017$Gender ), ] )
other <- data.frame ( rep ( "Other", num_not_null - NROW ( gender_2017 ) ), rep ( 2017, num_not_null - NROW ( gender_2017 ) ) )
colnames ( other ) <- c ( "Gender", "Year" )
colnames( gender_2017 ) <- c ( "Gender", "Year" )
gender_2017 <- rbind ( gender_2017, other )
gender_2015 <- data.frame ( data_2015$Gender, rep ( 2015, NROW ( data_2015 ) ) )
gender_2016 <- data.frame ( data_2016$gender, rep ( 2016, NROW ( data_2016 ) ) )
colnames ( gender_2015 ) <- c ( "Gender", "Year" )
colnames ( gender_2016 ) <- c ( "Gender", "Year" )
gender <- list ( gender_2015, gender_2016, gender_2017 )
gender <- do.call ( rbind, gender )
gender <- table( gender )
gender <- data.frame ( gender )
gender <- gender [ gender$Freq != 0, ]
table ( gender )
gender.m <- melt ( gender, id.vars = "Year" )
gender <- gender [ gender$Freq != 0, ]
gender <- gender [ gender$Freq != 0 | gender$Gender == "Prefer not to disclose", ]
gender <- gender [ gender$Freq != 0 | gender$Gender != "Prefer not to disclose", ]
gender <- gender [ gender$Freq != 0 & gender$Gender != "Prefer not to disclose", ]
gender <- list ( gender_2015, gender_2016, gender_2017 )
gender <- do.call ( rbind, gender )
gender <- table( gender )
gender <- data.frame ( gender )
gender <- gender [ gender$Freq != 0 & gender$Gender != "Prefer not to disclose", ]
Year
ggplot ( data = gender, aes( Year, Freq ) ) +
geom_bar( aes ( fill = Gender ), position = "dodge", stat = "identity" )
rm ( gender.m )
rm ( num_not_null, other, gender_2015, gender_2016, gender_2017 )
country <- data_2017$Country
country <- data.frame ( table ( country ) )
country$country <- as.character( country$country )
country$country [ country$country == "United States" ] <- "USA"
country$country [ country$country == "United Kingdom" ] <- "UK"
country$country [ country$country == "Russian Federation" ] <- "Russia"
colnames ( country ) <- c ( "region", "freq" )
View(country)
map.world <- map_data ( "world" )
install.packages( "maps" )
require(ggplot2)
require(maps)
map.world <- map_data ( "world" )
map.world <- merge( x = map.world, y = country, by = "region", all = TRUE)
map.world <- map.world [ order ( map.world$order ), ]
ggplot ( ) +
theme ( legend.position = "none" ) +
geom_map( data = map.world, map = map.world, aes ( map_id = region, x = long, y = lat, fill = freq ) ) +
scale_fill_gradient( low = "green", high = "red", guide = "colourbar" ) +
coord_equal ( )
country [ "Antartica", ]
country [ "Antarctica", ]
country [ country$region == "Antarctica", ]
country [ -( country$region == "Antarctica" ), ]
country <- country [ -( country$region == "Antarctica" ), ]
colnames ( country ) <- c ( "region", "freq" )
map.world <- map_data ( "world" )
map.world <- merge( x = map.world, y = country, by = "region", all = TRUE)
map.world <- map.world [ order ( map.world$order ), ]
ggplot ( ) +
theme ( legend.position = "none" ) +
geom_map( data = map.world, map = map.world, aes ( map_id = region, x = long, y = lat, fill = freq ) ) +
scale_fill_gradient( low = "green", high = "red", guide = "colourbar" ) +
coord_equal ( )
country <- data_2017$Country
country <- data.frame ( table ( country ) )
country$country <- as.character( country$country )
country$country [ country$country == "United States" ] <- "USA"
country$country [ country$country == "United Kingdom" ] <- "UK"
country$country [ country$country == "Russian Federation" ] <- "Russia"
country <- country [ -( country$region == "Antarctica" ), ]
country <- data_2017$Country
country <- data.frame ( table ( country ) )
country$country <- as.character( country$country )
country$country [ country$country == "United States" ] <- "USA"
country$country [ country$country == "United Kingdom" ] <- "UK"
country$country [ country$country == "Russian Federation" ] <- "Russia"
country <- country [ country$region == "Antarctica", ]
country <- data_2017$Country
country <- data.frame ( table ( country ) )
country$country <- as.character( country$country )
country$country [ country$country == "United States" ] <- "USA"
country$country [ country$country == "United Kingdom" ] <- "UK"
country$country [ country$country == "Russian Federation" ] <- "Russia"
country <- country [ - c ( 9 ), ]
colnames ( country ) <- c ( "region", "freq" )
map.world <- map_data ( "world" )
map.world <- merge( x = map.world, y = country, by = "region", all = TRUE)
map.world <- map.world [ order ( map.world$order ), ]
ggplot ( ) +
theme ( legend.position = "none" ) +
geom_map( data = map.world, map = map.world, aes ( map_id = region, x = long, y = lat, fill = freq ) ) +
scale_fill_gradient( low = "green", high = "red", guide = "colourbar" ) +
coord_equal ( )
country <- data_2017$Country
country <- data.frame ( table ( country ) )
country$country <- as.character( country$country )
country$country [ country$country == "United States" ] <- "USA"
country$country [ country$country == "United Kingdom" ] <- "UK"
country$country [ country$country == "Russian Federation" ] <- "Russia"
country <- country [ - c ( 9 ), ] # Remove Antartica
colnames ( country ) <- c ( "region", "freq" )
map.world <- map_data ( "world" )
map.world <- merge( x = map.world, y = country, by = "region", all = TRUE)
map.world <- map.world [ order ( map.world$order ), ]
ggplot ( ) +
theme ( legend.position = "none" ) +
geom_map( data = map.world, map = map.world, aes ( map_id = region, x = long, y = lat, fill = freq ) ) +
scale_fill_gradient( low = "green", high = "blue", guide = "colourbar" ) +
coord_equal ( )
rm ( country )
ggplot ( ) +
theme ( legend.position = "none" ) +
geom_map( data = map.world, map = map.world, aes ( map_id = region, x = long, y = lat, fill = freq ) ) +
scale_fill_gradient( low = "green", high = "blue", guide = "colourbar" ) +
coord_equal ( )
install.packages ( "maps" )
require(ggplot2)
require(maps)
runtime: shiny
runtime: shiny
